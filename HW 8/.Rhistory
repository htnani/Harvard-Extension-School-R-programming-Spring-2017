matrix.sort <- function(m) {
if(nrow(m) != ncol(m)) { stop("Not diagonal")}
if(is.null(rownames(m))) {rownames(m) <- 1:nrow(matrix)}
row.max <- apply(m, 1, which.max)
if(any(table(row.max) != 1)) {
col.max <- apply(m, 2, which.max)
if(any(table(col.max) != 1)) {
warning("Ties cannot be resolved")
}
return(m[, order(col.max)])
}
m[order(row.max)]
}
hier <- cutree(hclust(dist(scale(whsAnnBdatNum), method = "euclidean"), method = "ward"), i)
for(j in 1:i) {
print(paste("Cluster ",j," of ",i," Clusters:", sep = ""))
print(paste(rownames(whsAnnBdatNum[which(hier == j),]), collapse = ", "))
}
hier <- cutree(hclust(dist(scale(whsAnnBdatNum), method = "euclidean"), method = "ward"), 3)
for(j in 1:3) {
print(paste("Cluster ",j," of ",3," Clusters:", sep = ""))
print(paste(rownames(whsAnnBdatNum[which(hier == j),]), collapse = ", "))
}
getwd()
whsAnnBdatNum <- read.table("whs2016_AnnexB-data-wo-NAs.txt",sep="\t",header=TRUE,quote="")
hier <- cutree(hclust(dist(scale(whsAnnBdatNum), method = "euclidean"), method = "ward"), 3)
for(j in 1:3) {
print(paste("Cluster ",j," of ",3," Clusters:", sep = ""))
print(paste(rownames(whsAnnBdatNum[which(hier == j),]), collapse = ", "))
}
hier <- cutree(hclust(dist(scale(whsAnnBdatNum), method = "euclidean"), method = "ward"), 3)
for(i in 2:4) {
hier <- cutree(hclust(dist(scale(whsAnnBdatNum), method = "euclidean"), method = "ward"), i)
for(j in 1:i) {
}
print(matrix.sort(table(Hier = hier, KMeans = kmeans(scale(whsAnnBdatNum), i, nstart = 100)[["cluster"]])))
}
for(i in 2:4) {
hier <- cutree(hclust(dist(scale(whsAnnBdatNum), method = "euclidean"), method = "ward"), i)
for(j in 1:i) {
}
print(table(Hier = hier, KMeans = kmeans(scale(whsAnnBdatNum), i, nstart = 100)[["cluster"]])))
}
for(i in 2:4) {
hier <- cutree(hclust(dist(scale(whsAnnBdatNum), method = "euclidean"), method = "ward"), i)
for(j in 1:i) {
}
print(table(Hier = hier, KMeans = kmeans(scale(whsAnnBdatNum), i, nstart = 100)[["cluster"]]))
}
matrix.sort <- function(m) {
if(nrow(m) != ncol(m)) { stop("Not diagonal")}
if(is.null(rownames(m))) {rownames(m) <- 1:nrow(matrix)}
row.max <- apply(m, 1, which.max)
if(any(table(row.max) != 1)) {
col.max <- apply(m, 2, which.max)
if(any(table(col.max) != 1)) {
warning("Ties cannot be resolved")
}
return(m[, order(col.max)])
}
m[order(row.max),]
}
for(i in 2:4) {
hier <- cutree(hclust(dist(scale(whsAnnBdatNum), method = "euclidean"), method = "ward"), i)
for(j in 1:i) {
}
print(table(Hier = hier, KMeans = kmeans(scale(whsAnnBdatNum), i, nstart = 100)[["cluster"]]))
}
hier <- hclust(dist(whsAnnBdatNum), method = "ward.D2")
ori.heights <- hier$height
rnd.heights <- numeric()
for(i in 1:100) {
data.rnd <- apply(whsAnnBdatNum, 2, sample)
hier.rnd <- hclust(dist(data.rnd), method = "ward.D2")
rnd.heights <- c(rnd.heights, hier.rnd$height)
}
plot(hier)
plot(hier, labels = FALSE)
plot(hier)
hier2 <- hclust(dist(whsAnnBdatNum[names(whs)]))
plot(hier)
hier2 <- hclust(dist(whsAnnBdatNum[!(names(whsAnnBdatNum) %in% c("India", "China"))]), method = "ward.D2")
plot(hier2)
plot(hier2, labels = FALSE)
hier2$height[order(hier2$height)]
whsAnnBdatNum[order(hier2$height)]
whsAnnBdatNum[order(hier2$height),]
names(whsAnnBdatNum[order(hier2$height),])
rownames(whsAnnBdatNum[order(hier2$height),])
rownames(whsAnnBdatNum)[order(hier2$height),]
rownames(whsAnnBdatNum)[order(hier2$height)]
order(hier2)
order(hier)
cuttree(hier, 2)
cutree(hier, k = 2)
which(cutree(hier, k = 2) == 2)
which(cutree(hier, k = 3) == 2)
which(cutree(hier, k = 3) == 3)
