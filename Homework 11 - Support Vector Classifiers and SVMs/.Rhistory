levels(EDcropped[[1]])[EDcroppped[[1]]]
levels(EDcropped[[1]])[EDcropped[[1]]]
strptime(levels(EDcropped[[1]])[EDcropped[[1]]])
strptime(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p)
)
]
sfjkld
()
)
]
end
exit()
strptime(levels(EDcropped[[1]])[EDcropped[[1]]]))
)
strptime(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p)
strptime(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p")
as.POSIXct(strptime(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p"))
as.POSIXct(strptime(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p"))
as.POSIXct(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p")
class(levels(energydata[[1]])[energydata[[1]]]
)
as.POSIXct(levels(energydata[[1]])[energydata[[1]]], tz = "EST", %m/%d/%Y %I:%M %p")
as.POSIXct(levels(energydata[[1]])[energydata[[1]]], %m/%d/%Y %I:%M %p")
as.POSIXct(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p")
warnings()
as.POSIXct(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
EDcropped[4] <- as.POSIXct(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p")
EDcropped[4] <- as.POSIXct(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
EDcropped[4]
EDcropped
plot(EDcropped[[3]], EDcropped[[4]])
plot(EDcropped[[4]], EDcropped[[3]])
colnames(EDcropped)[4] <- "Date/Time"
summary(EDcropped)
EDcropped[4] <- as.POSIXlt(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
EDcropped[5] <- as.POSIXlt(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
savehistory("~/Documents/Other/Untitled.Rhistory")
rawenergydata <- read.csv("~/Documents/Other/energydata.csv", header = TRUE, as.is = TRUE)
rawenergydata
energydata <- read.csv("~/Documents/Other/energydata.csv")
EDcropped <- energydata[4175:6025,]
EDcropped
EDcropped[4] <- as.POSIXlt(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
EDcropped
as.POSIXct(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
EDcropped
EDcropped[4] <- as.POSIXlt(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
EDcropped[,1]
EDcropped[1,]
EDcropped[4] <- as.POSIXlt(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
[EDcropped[[1]]]
[EDcropped[[1]]
[EDcropped[[1]]]
EDcropped[[1]]
levels(EDcropped[[1]])
levels(EDcropped[[1]])[EDcropped[[1]]]
as.POSIXlt(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
EDcropped[4]
EDcropped[3]
EDcropped[1]
as.POSIXlt(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
EDcropped[1]
energydata[4] <- as.POSIXlt(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
energydata[4]
energydata[4] <- as.POSIXlt(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
class(energydata[1])
class(energydata[[1]])
class(energydata[[4]])
classs(as.POSIXlt(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = ""))
class(as.POSIXlt(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = ""))
energydata[5] <- as.POSIXlt(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
as.POSIXct(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p")
as.POSIXct(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
energydata[4]
energydata[4] <- as.POSIXlt(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
class(as.POSIXlt(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = ""))
class[4]
class(energydata[4])
class(energydata[[4]])
energydata[4,1] <- as.POSIXlt(levels(energydata[[1,1]])[energydata[[1,1]]], "%m/%d/%Y %I:%M %p", tz = "")
energydata
energydata[1,4] <- as.POSIXlt(levels(energydata[[1,1]])[energydata[[1,1]]], "%m/%d/%Y %I:%M %p", tz = "")
energydata
energydata[4] <- as.POSIXlt(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
warning()
warnings()
energydata[4] <- as.POSIXlt(levels(energydata[[1]])[energydata[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
isNA(energydata[4])
EDcropped[4] <- as.POSIXct(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
energydata
EDcropped[4] <- as.POSIXct(levels(EDcropped[[1]])[EDcropped[[1]]], "%m/%d/%Y %I:%M %p", tz = "")
energydata <- read.csv("~/Documents/Other/energydata.csv")
energydtaa
energydata
energydata[1,]
energydata <- read.csv("~/Documents/Other/energydata.csv", stringsAsFactors=FALSE)
energydata
class(energydata[1])
class(energydata[[1]])
energydata[4] <- as.POSIXlt(energydata[[1]], "%m/%d/%Y %I:%M %p", tz = "")
energydata[4] <- as.POSIXct(energydata[[1]], "%m/%d/%Y %I:%M %p", tz = "")
energydata[4]
energydata[2] <- as.POSIXlt(energydata[[2]], "%m/%d/%Y %I:%M %p", tz = "")
energydata <- read.csv("~/Documents/Other/energydata.csv", stringsAsFactors=FALSE)
energydata[4] <- as.POSIXct(energydata[[1]], "%m/%d/%Y %I:%M %p", tz = "")
energydata[5] <- as.POSIXlt(energydata[[2]], "%m/%d/%Y %I:%M %p", tz = "")
energydata[5] <- as.POSIXct(energydata[[2]], "%m/%d/%Y %I:%M %p", tz = "")
energydata
energydata[5] <- as.POSIXct(energydata[[2]], "%m/%d/%Y %I:%M %p", tz = "")
energydata
energydata[1] <- energydata[4]
energydata[2] <- energydata[5]
energydata
as.POSIXlt(energydata[1])$hour
as.POSIXlt(energydata[[1]])$hour
energydata <- as.POSIXlt(energydata[[1]])$hour
energydata
energydata <- read.csv("~/Documents/Other/energydata.csv")
energydata
energydata[1] <- as.POSIXct(energydata[[1]], "%m/%d/%Y %I:%M %p", tz = "")
energydata[1]
energydata[2] <- energydata[3]
energydata
labels(energydata)
energydata[2]
labels(energydata[2])
energydata <- read.csv("~/Documents/Other/energydata.csv")
energydata[1] <- as.POSIXct(energydata[[1]], "%m/%d/%Y %I:%M %p", tz = "")
energydata[2] <- as.POSIXct(energydata[[2]], "%m/%d/%Y %I:%M %p", tz = "")
energydata
energydata[5] <- as.POSIXlt(energydata[[1]])$hour
as.date(energydata[1])
as.Date(energydata[1])
as.Date(energydata[[1]])
energydata[4] <- as.Date(energydata[[1]])
energydata[5] <- as.POSIXlt(energydata[[1]])$hour
energydata
save(energydata,file="energydata.Rda")
energydata
class(energydata[5])
class(energydata[[5])
class(energydata[[5]])
split(energydata, energydata[5])
labels(energydata)
energydata
colnames(energydata[4]) <- "Date"
energydata
labels(energydata)
colnames(energydata)[4] <- "Date"
labels(energydata)
colnames(energydata)[5] <- "Time"
labels(energydata)
save(energydata,file="energydata.Rda")
subset(energydata, Time="5")
subset(energydata, Time=5)
subset(energydata, Time==5)
temp <- subset(energydata, Time==5)[]
temp <- subset(energydata, Time==5)
plot(temp[3], temp[1])
temp[3]
plot(temp[3], temp[1]
plot(temp[3], temp[1])
plot(temp[3])
plot(temp[1])
plot(temp[1], temp[3])
length(temp[1])
length(temp[3])
length(temp[3,])
temp[1]
plot(temp[[1]], temp[[3]])
temp <- subset(energydata, Time==13)
plot(temp[[1]], temp[[3]])
plot(subset(energydata, Time==13)[[1]], subset(energydata, Time==13)[[3]])
plot(subset(energydata, Time==1)[[1]], subset(energydata, Time==1)[[3]])
plot(subset(energydata, Time==13)[[1]], subset(energydata, Time==13)[[3]])
plot(subset(energydata, Time==1)[[1]], subset(energydata, Time==1)[[3]])
plot(subset(energydata, Time==23)[[1]], subset(energydata, Time==23)[[3]])
plot(subset(energydata, Time==0)[[1]], subset(energydata, Time==0)[[3]])
plot(subset(energydata, Time==4)[[1]], subset(energydata, Time==4)[[3]])
plot(subset(energydata, Time==6)[[1]], subset(energydata, Time==6)[[3]])
plot(subset(energydata, Time==7)[[1]], subset(energydata, Time==7)[[3]])
plot(subset(energydata, Time==22)[[1]], subset(energydata, Time==22)[[3]])
plot(subset(energydata, Time==21)[[1]], subset(energydata, Time==21)[[3]])
plot(subset(energydata, Time==23)[[1]], subset(energydata, Time==23)[[3]])
qplot(subset(energydata, Time==23)[[1]], subset(energydata, Time==23)[[3]])
qqplot(subset(energydata, Time==23)[[1]], subset(energydata, Time==23)[[3]])
qqplot(subset(energydata, Time==23)[[3]])
ggplot(subset(energydata, Time==23)[[1]], subset(energydata, Time==23)[[3]])
plot(subset(energydata, Time==23)[[1]], subset(energydata, Time==23)[[3]])
as.Date(energydata[1])
as.Date(energydata[[1]])
energydata[[1]]
energydata[[4]]
energydata
energydata[4] <- as.Date(energydata[[1]], tz="")
energydata
save(energydata,file="energydata.Rda")
months(energydate[[4]])
months(energydata[[4]])
subset(energydata, months(energydate[[4]])==June
)
subset(energydata, months(energydata[[4]])=="June"
)
boxplot(subset(energydata, months(energydate[[4]])=="June"), subset(energydata, months(energydate[[4]])=="July"), subset(energydata, months(energydate[[4]])=="September"))
boxplot(subset(energydata, months(energydata[[4]])=="June"), subset(energydata, months(energydata[[4]])=="July"), subset(energydata, months(energydata[[4]])=="September"))
boxplot(subset(energydata[[4]], months(energydata[[4]])=="June"), subset(energydata, months(energydata[[4]])=="July"), subset(energydata, months(energydata[[4]])=="September"))
boxplot(subset(energydata[4], months(energydata[[4]])=="June"), subset(energydata, months(energydata[[4]])=="July"), subset(energydata, months(energydata[[4]])=="September"))
boxplot(subset(energydata[3], months(energydata[[4]])=="June"), subset(energydata, months(energydata[[4]])=="July"), subset(energydata, months(energydata[[4]])=="September"))
boxplot(subset(energydata[3], months(energydata[[4]])=="June"))
boxplot(subset(energydata[3], months(energydata[[4]])=="July"))
boxplot(subset(energydata[3], months(energydata[[4]])=="August"))
boxplot(subset(energydata[3], months(energydata[[4]])=="January"))
boxplot(subset(energydata[3], months(energydata[[4]])=="July"))
boxplot(subset(energydata[3], months(energydata[[4]])=="July"), energydata[[5]]==5)
boxplot(subset(energydata[3], months(energydata[[4]])=="July"), energydata[[5]]==4)
boxplot(subset(energydata[3], months(energydata[[4]])=="June"), subset(energydata[3], months(energydata[[4]])=="July"), subset(energydata[3], months(energydata[[4]])=="September"))
boxplot(subset(energydata[3], months(energydata[[4]])=="July"), subset(energydata[3], months(energydata[[4]])=="September"))
boxplot(subset(energydata[3], months(energydata[[4]])=="July"), subset(energydata[3], months(energydata[[4]])=="August"))
boxplot(subset(energydata[3], months(energydata[[4]])=="Jul"), subset(energydata[3], months(energydata[[4]])=="August"))
boxplot(subset(energydata[3], months(energydata[[4]])=="July"), subset(energydata[3], months(energydata[[4]])=="August"))
c(1,2,3)
boxplot(subset(energydata[3], months(energydata[[4]])=="July"), c(1,2,3)
)
boxplot(energydata[3], months(energydata[[4]])=="July", c(1,2,3))
boxplot(energydata[3], c(1,2,3))
boxplot(energydata[3],c(1,2,3))
boxplot(c(1,2,3))
boxplot(energydata[[3]],c(1,2,3))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July"), subset(energydata[3], months(energydata[[4]])=="August"))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July"), subset(energydata[[3]], months(energydata[[4]])=="August"))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="June'"), subset(energydata[[3]], months(energydata[[4]])=="August"))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July'"), subset(energydata[[3]], months(energydata[[4]])=="August"))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July"), subset(energydata[[3]], months(energydata[[4]])=="August"))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="June"), subset(energydata[[3]], months(energydata[[4]])=="August"))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July"), subset(energydata[[3]], months(energydata[[4]])=="August"))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July" & energydata[[5]]==5), subset(energydata[[3]], months(energydata[[4]])=="August") & energydata[[5]]==5)
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July" & energydata[[5]]==5), subset(energydata[[3]], months(energydata[[4]])=="August" & energydata==5))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July" & energydata[[5]]==5), subset(energydata[[3]], months(energydata[[4]])=="August" & energydata[[5==5))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July" & energydata[[5]]==5), subset(energydata[[3]], months(energydata[[4]])=="August" & energydata[[5]]==5))
plot(subset(energydata[[3]], energydata[[5]]=5)
plot(subset(energydata[[3]], energydata[[5]]==5), subset(energydata[[4]], energydata==5))
plot(subset(energydata[[3]], energydata[[5]]==5), subset(energydata[[4]], energydata[[5==5))
plot(subset(energydata[[3]], energydata[[5]]==5), subset(energydata[[4]], energydata[[5]]==5))
plot(subset(energydata[[4]], energydata[[5]]==5), subset(energydata[[3]], energydata[[5]]==5))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July" & energydata[[5]]==23), subset(energydata[[3]], months(energydata[[4]])=="August" & energydata[[5]]==23))
savehistory("~/energydataconsolehistory.Rhistory")
plot(subset(energydata[[4]], energydata[[5]]==5), subset(energydata[[3]], energydata[[5]]==5))
plot(subset(energydata[[4]], energydata[[5]]==23), subset(energydata[[3]], energydata[[5]]==23))
boxplot(subset(energydata[[3]], months(energydata[[4]])=="July" & energydata[[5]]==23), subset(energydata[[3]], months(energydata[[4]])=="August" & energydata[[5]]==23))
ls()
install.packages("rvest")
?pairs
install.packages("ISLR")
install.packages("car")
?confint
?predict
?vif
?log
pr.out
library(glmnet)
library(leaps)
library(ggplot2)
library(MASS)
WWdata <- read.table("winequality-white.csv", sep=";", header = TRUE)
## Red wine data - RW means Red Wine
RWdata <- read.table("winequality-red.csv", sep=";", header = TRUE)
model <- "KNN, K = 50"
model [9:11]
model [9:10]
model [9]
substring(model, 9, 11)
substring(model, 10, 11)
substring(model, 10, 12)
substring(model, 10, 19)
substring(model, 10, 10)
substring(model, 10, 11)
length(model)
nchar(model)
c("Logistic Regression", "LDA", "QDA", paste("KNN, K = ", names(klist), sep = ""))
klist <- list()
names(klist) <- c(1, 2, 5, 10, 20, 50, 100)
for (k in c(1, 2, 5, 10, 20, 50, 100)) {
klist[[k]] <- "arbitrary"
}
names(klist)
for (k in c(1, 2, 5, 10, 20, 50, 100)) {
klist[[as.character(k)]] <- "arbitrary"
}
names(klist)
klist <- list()
for (k in c(1, 2, 5, 10, 20, 50, 100)) {
klist[[as.character(k)]] <- "arbitrary"
}
names(klist)
substring("dsjflk", 3, 5)
substring("KNN = 50", 3, 5)
nchars("fdjlks")
nchar("fdjlks")
install.packages("randomForest")
install.packages("randomForest")
?floor
summary(dbaDat)
dbaDat <- read.table("data_banknote_authentication.txt",sep=",")
getwd()
setwd("/Users/Abe/R programming/HES class Spring 2017/HW 11")
getwd()
dbaDat <- read.table("data_banknote_authentication.txt",sep=",")
summary(dbaDat)
?randomForest
library("randomForest")
?randomForest
nrow(dbaDat)
library("01971")
library("e1971")
library("e1071")
?tune.knn
?tuen
?tune
?tune.control
?tune
?tune.knn
?tune
train <- sample(c(FALSE, TRUE), nrow(dbaDat), replace = TRUE)
tuneKNN <- tune.knn(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[train, "auth"], k = c(2, 3, 5, 10, 25, 50, 100), tunecontrol = tune.control(sampling = "cross"), cross=10)
dbaDat[train,]
dbaDat[train, auth]
dbaDat[train, "auth"]
names(dbaDat)
colnames(dbaDat) <- c("var","skew","curt","entr","auth")
tuneKNN <- tune.knn(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[train, "auth"], k = c(2, 3, 5, 10, 25, 50, 100), tunecontrol = tune.control(sampling = "cross"), cross=10)
type(dbaDat[train, !names(dbaDat) %in% "auth"])
class(dbaDat[train, !names(dbaDat) %in% "auth"])
class(dbaDat[[train, !names(dbaDat) %in% "auth"]])
class(dbaDat[train, !names(dbaDat) %in% "auth"])
?tune.knn
tuneKNN <- tune.knn(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[train, "auth"], k = c(2, 3, 5, 10, 25, 50, 100), tunecontrol = tune.control(sampling = "cross"), cross=10)
dbaDat[train, "auth"]
class(dbaDat[train, "auth"]
)
class(dbaDat[train, "auth", drop = F]
)
tuneKNN <- tune.knn(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[train, "auth", drop = F], k = c(2, 3, 5, 10, 25, 50, 100), tunecontrol = tune.control(sampling = "cross"), cross=10)
tuneKNN <- tune.knn(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[train, "auth", drop = FALSE], k = c(2, 3, 5, 10, 25, 50, 100), tunecontrol = tune.control(sampling = "cross"), cross=10)
class(dbaDat[train, "auth", drop = F])
tuneKNN <- tune.knn(dbaDat[train, !names(dbaDat) %in% "auth"], as.factor(dbaDat[train, "auth"]), k = c(2, 3, 5, 10, 25, 50, 100), tunecontrol = tune.control(sampling = "cross"), cross=10)
pred <- predict(tuneKNN$best.model, subset(dbaDat[!train,], select = -auth))
tuneKNN$best.model
pred <- predict(tuneKNN$k, subset(dbaDat[!train,], select = -auth))
tuneKNN$best.model
tuneKNN$best.model$k
tuneKNN$best.model
tuneKNN$best.model$call
pred <- predict(tuneKNN$best.model$call, subset(dbaDat[!train,], select = -auth))
class(tune.out3)
best.model <- NULL
test.error <- data.frame()
for (i in 1:25) {
train <- sample(c(FALSE, TRUE), nrow(dbaDat), replace = TRUE)
tune.out3 <- tune(svm, auth ~ ., data = dbaDat[train,], kernel = "linear", ranges = list(cost = exp(seq(log(2.15), log(4.64), length.out = 10)), scale = TRUE))
pred <- predict(tune.out3$best.model, subset(dbaDat[!train,], select = -auth))
min.cost <- tune.out3$performances[[which.min(tune.out3$performances$error), "cost"]]
test.error <- rbind(test.error, data.frame(cost = min.cost, error = sum(pred == as.factor(dbaDat[!train, "auth"]))))
}
class(tune.out3)
class(tuneKNN)
class(tune.out3$best.model)
class(tuneKNN$best.model)
class(tuneKNN$best.model$k)
tuneKNN$best.model
class(tuneKNN$best.model$call)
pred <- knn.predict(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[!train, !names(dbaDat) %in% "auth"], y = as.factor(dbaDat[train, "auth"]), k = tuneKNN$k)
library(knn)
library("knn")
?knn
?predict.knn
?knn.predict
?knn.dist
pred <- knn(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[!train, !names(dbaDat) %in% "auth"], y = as.factor(dbaDat[train, "auth"]), k = tuneKNN$k)
library("knn")
library("class")
?knn
pred <- knn(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[!train, !names(dbaDat) %in% "auth"], y = as.factor(dbaDat[train, "auth"]), k = tuneKNN$k)
pred <- knn(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[!train, !names(dbaDat) %in% "auth"], cl = as.factor(dbaDat[train, "auth"]), k = tuneKNN$k)
tuneKNN$k
tuneKNN$best.model
pred <- knn(dbaDat[train, !names(dbaDat) %in% "auth"], dbaDat[!train, !names(dbaDat) %in% "auth"], cl = as.factor(dbaDat[train, "auth"]), k = tuneKNN$best.model$k)
pred
?knn
pred == dbaDat[!train, "auth"]
pred != dbaDat[!train, "auth"]
tuneKNN$best.model
tuneKNN <- tune.knn(dbaDat[train, !names(dbaDat) %in% "auth"], as.factor(dbaDat[train, "auth"]), k = c(1, 2, 3, 5, 10, 25, 50, 100), tunecontrol = tune.control(sampling = "cross"), cross=10)
tuneKNN$best.model$k
tuneKNN <- tune.knn(dbaDat[train, !names(dbaDat) %in% "auth"], as.factor(dbaDat[train, "auth"]), k = c(2, 3, 5, 10, 25, 50, 100), tunecontrol = tune.control(sampling = "cross"), cross=10)
?tune.knn
?tune
test.error <- rbind(test.error, data.frame(minimum.error.k = min.error.k, error = sum(pred == as.factor(dbaDat[!train, "auth"]))))
min.error.k <- tuneKNN$best.model$k
test.error <- rbind(test.error, data.frame(minimum.error.k = min.error.k, error = sum(pred == as.factor(dbaDat[!train, "auth"]))))
test.error <- data.frame()
min.error.k <- tuneKNN$best.model$k
test.error <- rbind(test.error, data.frame(minimum.error.k = min.error.k, error = sum(pred == as.factor(dbaDat[!train, "auth"]))))
test.error
train <- sample(c(FALSE, TRUE), nrow(dbaDat), replace = TRUE)
svmFit <- svm(auth ~ var + skew, data = dbaDat[train,], kernel = "radial", cost = 1, gamma = 1)
plot(svmFit, dbaDat[train,])
svmFit
plot(svmFit, dbaDat[train,])
?svm
svm(auth ~ var + skew, data = dbaDat[train,], kernel = "radial", cost = 1, gamma = 1)
svm(auth ~ var + skew, data = dbaDat[train,], kernel = "radial", cost = 1, gamma = 1)
plot(svmFit, dbaDat[train,])
?plot.svm
plot(svmFit, dbaDat[train, names(dbaDat) %in% c("auth", "var", "skew")])
test.accuracy <- data.frame()
train <- sample(c(FALSE, TRUE), nrow(dbaDat), replace = TRUE)
tune.radial <- tune(svm, auth ~ ., data = dbaDat[train,], kernel = "radial", ranges = list(cost = c(1, 2, 5, 10, 20), gamma = c(0.01, 0.02, 0.05, 0.1, 0.2)))
pred <- predict(tune.radial$best.model, subset(dbaDat[!train,], select = -auth))
min.cost <- tune.radial$performances[[which.min(tune.radial$performances$error), "cost"]]
min.gamma <- tune.radial$performances[[which.min(tune.radial$performances$error), "gamma"]]
test.accuracy <- rbind(test.accuracy, data.frame(cost = min.cost, gamma = min.gamma, error = sum(pred == as.factor(dbaDat[!train, "auth"]))/length(pred)))
test.accuracy
train <- sample(c(FALSE, TRUE), nrow(dbaDat), replace = TRUE)
tune.radial <- tune(svm, auth ~ ., data = dbaDat[train,], kernel = "radial", ranges = list(cost = c(1, 2, 5, 10, 20), gamma = c(0.01, 0.02, 0.05, 0.1, 0.2)))
pred <- predict(tune.radial$best.model, subset(dbaDat[!train,], select = -auth))
min.cost <- tune.radial$performances[[which.min(tune.radial$performances$error), "cost"]]
min.gamma <- tune.radial$performances[[which.min(tune.radial$performances$error), "gamma"]]
test.accuracy <- rbind(test.accuracy, data.frame(cost = min.cost, gamma = min.gamma, error = sum(pred == as.factor(dbaDat[!train, "auth"]))/length(pred)))
test.accuracy
for (i in 1:25) {
train <- sample(c(FALSE, TRUE), nrow(dbaDat), replace = TRUE)
tune.radial <- tune(svm, auth ~ ., data = dbaDat[train,], kernel = "radial", ranges = list(cost = c(1, 2, 5, 10, 20), gamma = c(0.01, 0.02, 0.05, 0.1, 0.2)))
pred <- predict(tune.radial$best.model, subset(dbaDat[!train,], select = -auth))
min.cost <- tune.radial$performances[[which.min(tune.radial$performances$error), "cost"]]
min.gamma <- tune.radial$performances[[which.min(tune.radial$performances$error), "gamma"]]
test.accuracy <- rbind(test.accuracy, data.frame(cost = min.cost, gamma = min.gamma, error = sum(pred == as.factor(dbaDat[!train, "auth"]))/length(pred)))
}
test.accuracy
plot(tune.radial)
hist(test.accuracy$error)
pred
tune.radial$best.model
test.accuracy
barplot(table(signif(test.accuracy$cost, digits = 4)), main = "Optimal cost Value")
barplot(table(signif(test.accuracy$gamma, digits = 4)), main = "Optimal gamma Value")
