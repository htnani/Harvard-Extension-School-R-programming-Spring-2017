read.table("winequality-white.csv", sep=";", header = TRUE)
WWdata <- read.table("winequality-white.csv", sep=";", header = TRUE)
pairs(WWdata)
read.table("winequality-white.csv", sep=";", header = TRUE)
read.table("winequality-white.csv", sep=";", header = TRUE)
## White wine data
WWdata <- read.table("winequality-white.csv", sep=";", header = TRUE)
## Red wine data
RWdata <- read.table("winequality-red.csv", sep=";", header = TRUE)
?co
?cor
lmWAlcohol <- lm(quality ~ alcohol, WWdata)
lmWDensity <- lm(quality ~ density, WWdata)
## Red wine
lmRAlcohol <- lm(quality ~ alcohol, RWdata)
lmRVA <- lm(quality ~ volatile.acidity, RWdata)
lmRSulphates <- lm(quality ~ sulphates, RWdata)
lmWAlcohol
lmWDensity
lmRVA
summary(lmRVA)
summary(WWdata$alcohol)
summary(RWdata$volatile.acidity)
summary(lmRVA)
summary(RWdata$volatile.acidity)
summary(RWdata$quality)
?lm
?pairs
pairs(WWdata[,c("fixed.acidity", "volatile.acidity")])
pairs(WWdata[,c("fixed.acidity", "volatile.acidity", "citric acid", "pH")])
?sample
pairs(sample(WWdata[,c("fixed.acidity", "volatile.acidity", "citric acid", "pH")]), 200)
pairs(sample(WWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")]), 200)
pairs(sample(WWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")]), 200)
pairs(sample(WWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")]), 200)
pairs(sample(WWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")]), 100)
pairs(sample(WWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")]), 50)
pairs(sample(WWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200))
pairs(WWdata[sample(1:nrows(WWdata), 200"200"),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200))
pairs(WWdata[sample(1:nrows(WWdata), 200),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200))
pairs(WWdata[sample(1:nrows(WWdata), 200),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200)
pairs(WWdata[sample(1:nrow(WWdata), 200),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200)
pairs(WWdata[sample(1:nrow(WWdata), 200),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200)
pairs(WWdata[sample(1:nrow(WWdata), 100),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200)
pairs(WWdata[sample(1:nrow(WWdata), 50),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200)
pairs(WWdata[sample(1:nrow(WWdata), 50),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200)
pairs(WWdata[sample(1:nrow(WWdata), 50),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200)
pairs(WWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")])
pairs(WWdata[sample(1:nrow(WWdata), 50),c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")], 200)
pairs(RWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")])
pairs(RWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")])
pairs(RWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")])
pairs(RWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")])
pairs(RWdata[,c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")])
pairs(WWdata[!(names(WWdata) %in c("fixed.acidity", "citric acid")))])
pairs(WWdata[!(names(WWdata) %in c("fixed.acidity", "citric.acid")))])
pairs(WWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid")))])
pairs(WWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid"))])
pairs(WWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid"))])
pairs(WWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid"))])
)
)
]
]
]
pairs(WWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid")))])
pairs(WWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid"))])
pairs(WWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid"))]
)
WWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid"))]
pairs(WWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid"))])
pairs(RWdata[!(names(WWdata) %in% c("fixed.acidity", "citric.acid"))])
cor(WWdata)
?sapply]
?sapply
names(summary(lm(quality ~ alcohol ~ WWdata)))
names(summary(lm(quality ~ alcohol, WWdata)))
dfTmp <- NULL
whichSum <- array(0,dim=c(11,12,4),
dimnames=list(NULL,colnames(model.matrix(quality~.,WWdata)),
c("exhaustive", "backward", "forward", "seqrep")))
# Split data into training and test 30 times:
iFolds <- 10
bTrain <- sample(1:iFolds, nrow(WWdata), replace = TRUE)
for ( iFold in 1:iFolds ) {
# Try each method available in regsubsets
# to select best model of each size:
for ( jSelect in c("exhaustive", "backward", "forward", "seqrep") ) {
rsTrain <- regsubsets(quality~.,WWdata[bTrain != iFold,],nvmax=11,method=jSelect)
# Add up variable selections:
whichSum[,,jSelect] <- whichSum[,,jSelect] + summary(rsTrain)$which
# Calculate test error for each set of variables
# using predict.regsubsets implemented above:
for ( kVarSet in 1:11 ) {
# make predictions:
testPred <- predict(rsTrain,WWdata[bTrain == iFold,],id=kVarSet)
# calculate MSE:
mseTest <- mean((testPred-WWdata[bTrain == iFold,"quality"])^2)
mseTrain <- summary(rsTrain)$rss[kVarSet]/nrow(WWdata[bTrain != iFold,])
# add to data.frame for future plotting:
dfTmp <- rbind(dfTmp,data.frame(fold=iFold,sel=jSelect,vars=kVarSet,
mse=c(mseTest,mseTrain), trainTest=c("test (in fold)","train (out of fold)")))
}
}
}
library(leaps)
library(ggplot2)
dfTmp <- NULL
whichSum <- array(0,dim=c(11,12,4),
dimnames=list(NULL,colnames(model.matrix(quality~.,WWdata)),
c("exhaustive", "backward", "forward", "seqrep")))
# Split data into training and test 30 times:
iFolds <- 10
bTrain <- sample(1:iFolds, nrow(WWdata), replace = TRUE)
for ( iFold in 1:iFolds ) {
# Try each method available in regsubsets
# to select best model of each size:
for ( jSelect in c("exhaustive", "backward", "forward", "seqrep") ) {
rsTrain <- regsubsets(quality~.,WWdata[bTrain != iFold,],nvmax=11,method=jSelect)
# Add up variable selections:
whichSum[,,jSelect] <- whichSum[,,jSelect] + summary(rsTrain)$which
# Calculate test error for each set of variables
# using predict.regsubsets implemented above:
for ( kVarSet in 1:11 ) {
# make predictions:
testPred <- predict(rsTrain,WWdata[bTrain == iFold,],id=kVarSet)
# calculate MSE:
mseTest <- mean((testPred-WWdata[bTrain == iFold,"quality"])^2)
mseTrain <- summary(rsTrain)$rss[kVarSet]/nrow(WWdata[bTrain != iFold,])
# add to data.frame for future plotting:
dfTmp <- rbind(dfTmp,data.frame(fold=iFold,sel=jSelect,vars=kVarSet,
mse=c(mseTest,mseTrain), trainTest=c("test (in fold)","train (out of fold)")))
}
}
}
predict.regsubsets <- function (object, newdata, id, ...){
form=as.formula(object$call [[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars=names (coefi)
mat[,xvars] %*% coefi
}
```
````
dfTmp <- NULL
whichSum <- array(0,dim=c(11,12,4),
dimnames=list(NULL,colnames(model.matrix(quality~.,WWdata)),
c("exhaustive", "backward", "forward", "seqrep")))
# Split data into training and test 30 times:
iFolds <- 10
bTrain <- sample(1:iFolds, nrow(WWdata), replace = TRUE)
for ( iFold in 1:iFolds ) {
# Try each method available in regsubsets
# to select best model of each size:
for ( jSelect in c("exhaustive", "backward", "forward", "seqrep") ) {
rsTrain <- regsubsets(quality~.,WWdata[bTrain != iFold,],nvmax=11,method=jSelect)
# Add up variable selections:
whichSum[,,jSelect] <- whichSum[,,jSelect] + summary(rsTrain)$which
# Calculate test error for each set of variables
# using predict.regsubsets implemented above:
for ( kVarSet in 1:11 ) {
# make predictions:
testPred <- predict(rsTrain,WWdata[bTrain == iFold,],id=kVarSet)
# calculate MSE:
mseTest <- mean((testPred-WWdata[bTrain == iFold,"quality"])^2)
mseTrain <- summary(rsTrain)$rss[kVarSet]/nrow(WWdata[bTrain != iFold,])
# add to data.frame for future plotting:
dfTmp <- rbind(dfTmp,data.frame(fold=iFold,sel=jSelect,vars=kVarSet,
mse=c(mseTest,mseTrain), trainTest=c("test (in fold)","train (out of fold)")))
}
}
}
dfTmp
dfTmp$mse
dfTmp[[,mse]]
dfTmp[[,"mse"]]
dfTmp[["mse",]]
dfTmp["mse",]
dfTmp[,"mse"]
dfTmp[which(dfTmp$sel == "exhaustive" && dfTmp$vars == 3 && dfTmp$trainTest == "train(out of fold)"),mse]
dfTmp[which(dfTmp$sel == "exhaustive" && dfTmp$vars == 3 && dfTmp$trainTest == "train(out of fold)"),"mse"]
dfTmp[,"mse"]
dfTmp[which(dfTmp$sel == "exhaustive" && dfTmp$vars == 3 && dfTmp$trainTest == "train (out of fold)"),"mse"]
dfTmp[which(dfTmp$sel == "exhaustive" && dfTmp$vars == 3),"mse"]
dfTmp[which(dfTmp$sel == "exhaustive"),"mse"]
dfTmp[which(dfTmp$sel == "exhaustive" && dfTmp$vars == 3),"mse"]
dfTmp[which(dfTmp$sel == "exhaustive"),"mse"]
dfTmp[,"vars"]
dfTmp[which(dfTmp$sel == "exhaustive" && dfTmp$vars = 3),"mse"]
dfTmp[which(dfTmp$sel == "exhaustive" && dfTmp$vars == 3),"mse"]
dfTmp[which(dfTmp$vars == 3),"mse"]
dfTmp[,"vars"]
dfTmp[which(dfTmp$vars == 3),]
dfTmp[which(dfTmp$sel == "exhaustive" && dfTmp$vars == 3),]
dfTmp[which(dfTmp$sel == "exhaustive" && dfTmp$sel == "exhaustive"),]
dfTmp[which(dfTmp$sel == "exhaustive" & dfTmp$sel == "exhaustive"),]
dfTmp[which(dfTmp$sel == "exhaustive" & dfTmp$vars == 3),"mse"]
dfTmp[which(dfTmp$sel == "exhaustive" & dfTmp$vars == 3 & dfTmp$trainTest == "train (out of fold)"),"mse"]
mean(dfTmp[which(dfTmp$sel == "exhaustive" & dfTmp$vars == 3 & dfTmp$trainTest == "train (out of fold)"),"mse"])
library(glmnet)
?cv.glmnet
x
# -1 to get rid of intercept that glmnet knows to include:
x <- model.matrix(quality~.,WWdata)[,-1]
head(WWdata)
head(x)
y <- WWdata[,"quality"]
ridgeRes <- glmnet(scale(x),y,alpha=0)
plot(ridgeRes)
x
y
cv.glmnet(scale(x),y)
cv.glmnet(scale(x),y,alpha=0)
cvRidgeREs <- cv.glmnet(scale(x),y,alpha=0)
plot(cvRidgeRes)
cvRidgeRes <- cv.glmnet(scale(x),y,alpha=0)
plot(cvRidgeRes)
cvRidgeRes$lambda.min
cvRidgeRes$lambda.1se
predict(ridgeRes,type="coefficients",s=cvRidgeRes$lambda.min)
predict(ridgeRes,type="coefficients",s=cvRidgeRes$lambda.1se)
cvRidgeRes <- cv.glmnet(x,y,alpha=0,lambda=10^((-80:80)/20))
plot(cvRidgeRes)
winedata = rbind
winedata = rbind(WWdata, RWdata)
head(winedata)
WWdata["Color"] <- "white"
RWdata["Color"] <- "red"
wineData <- rbind(WWdata, RWdata)
head(wineData)
WWdata["color"] <- "white"
RWdata["color"] <- "red"
wineData <- rbind(WWdata, RWdata)
head(wineData)
rm(wineData$Color)
## White wine data - WW means White Wine
WWdata <- read.table("winequality-white.csv", sep=";", header = TRUE)
## Red wine data - RW means Red Wine
RWdata <- read.table("winequality-red.csv", sep=";", header = TRUE)
WWdata <- WWdata[WWdata$density < 1.01,]
pr.out <- prcomp(wineData[!(names(wineData) %in% "color")], scale = TRUE)
WWdata["color"] <- "white"
RWdata["color"] <- "red"
wineData <- rbind(WWdata, RWdata)
head(wineData)
pr.out <- prcomp(wineData[!(names(wineData) %in% "color")], scale = TRUE)
plot(pr.out)
biplot(pr.out)
biplot(pr.out, scale = 0)
?biplot
?match
?which
?match
match(wineData$color, c("white", "red"))
match(wineData$color, c("white", "red"))[4000]
match(wineData$color, c("white", "red"))[5000]
match(wineData$color, c("white", "red"))[45000]
match(wineData$color, c("white", "red"))[4500]
match(wineData$color, c("white", "red"))[490000]
match(wineData$color, c("white", "red"))[4900]
?biplot
?points
points(pr.out$scores[,1,2])
points(pr.out$score[,1,2])
pr.out$score[,1,2]
points(pr.out$scores[,1,2]
fdsjkl;
pr.out$score[,1:2]
pr.out$score[,1:2]
pr.out$score[,1:2]
s
pr.out$scores[,1:2]
pr.out
pr.out$scores[,1:2]
pr.out$scores[1:2]
pr.out$scores
pr.out$score
names(pr.out)
head(pr.out$x)
?point
?points
temp1 <- biplot(pr.out, scale = 0)
names(temp1)
temp1
?par
points(data.frame(c(2, 3))
)
biplot(pr.out, scale = 0)
biplot(pr.out, scale = 0, col = c("white", "black"))
points(data.frame(c(0,0)))
points(data.frame(c(0,0)))
points(data.frame(c(0,1)))
points(data.frame(c(1,1)))
points(data.frame(c(0,0)), col = "red")
points(data.frame(c(0,0)), col = "red")
points(pr.out$x[,1:2], col = "red")
points(pr.out$x[,1:2], col = "red")
